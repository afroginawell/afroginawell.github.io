(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{367:function(t,s,a){"use strict";a.r(s);var _=a(4),v=Object(_.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"中国大学mooc-陈越、何钦铭-数据结构-2022夏期中考试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中国大学mooc-陈越、何钦铭-数据结构-2022夏期中考试"}},[t._v("#")]),t._v(" 中国大学MOOC-陈越、何钦铭-数据结构-2022夏期中考试")]),t._v(" "),s("p",[t._v("R1-1")]),t._v(" "),s("p",[t._v("在用数组表示的循环队列中，front值一定小于等于rear值。F")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】题目说明了是循环队列，那么很可能在rear在队列最后一个元素之后插入一个元素，rear就会变成队首，这时，只要存在元素出队列，那么front值就比rear值大")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R1-2")]),t._v(" "),s("p",[t._v("将1、2、3、4、5、6顺序插入初始为空的AVL树中，当完成这6个元素的插入后，该AVL树的先序遍历结果是：4、2、1、3、5、6。T")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】AVL树是平衡二叉树（average length tree）。AVL树生成过程如图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC%E9%99%88%E8%B6%8A%E4%BD%95%E9%92%A6%E9%93%AD%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842022%E5%A4%8F%E6%9C%9F%E4%B8%AD%E8%80%83%E8%AF%951.jpg",alt:"中国大学MOOC陈越何钦铭数据结构2022夏期中考试1"}})]),t._v(" "),s("p",[t._v("很轻松可以根据最后的结果得出先序遍历结果是：4、2、1、3、5、6")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R1-3")]),t._v(" "),s("p",[t._v("在具有"),s("em",[t._v("N")]),t._v("个结点的单链表中，访问结点和增加结点的时间复杂度分别对应为"),s("em",[t._v("O")]),t._v("(1)和"),s("em",[t._v("O")]),t._v("("),s("em",[t._v("N")]),t._v(")。F")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】单链表的访问结点的时间复杂度是O(N)，增加结点的复杂度是O(1)")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R1-4")]),t._v(" "),s("p",[t._v("一棵有124个结点的完全二叉树，其叶结点个数是确定的。T")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】假设n0为度为0的结点，n2位度为2的结点， n2 = n0 + 1， 由题目可得")]),t._v(" "),s("p",[t._v("n2 + n0 = 124，联立方程便可以得到n0的个数，所以叶结点个数是确定的")]),t._v(" "),s("p",[t._v("n2 = n0 + 1 的证明：设结点数为n，度为i的结点为ni，n0+n1+n2 = n")]),t._v(" "),s("p",[t._v("设边数为m，从下往上看：除根节点外，所有结点都有父节点，即每个结点（除根节点必对应一条边）, m = n + 1")]),t._v(" "),s("p",[t._v("从上往下看：度为i的结点对应i条边，即 2n2 + 1n1 + 0n0 = m")]),t._v(" "),s("p",[t._v("综上所述，得：2n2 + 1n1 + 0n0 = n0 + n1 + n2 + 1")]),t._v(" "),s("p",[t._v("化简可得：n2 = n0 + 1")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R1-5")]),t._v(" "),s("p",[t._v("用邻接表法存储图，占用的存储空间数只与图中结点个数有关，而与边数无关。F")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】邻接表法存储图，即将每个结点作为一条链表的头结点，将结点与其他点所连接的边作为链表连接的依据，一条结点有i条边，之后就连接i个结点，占用的存储空间数为：边数+结点数")]),t._v(" "),s("p",[t._v("所以，用邻接表法存储图，占用的存储空间数与图中结点个数和边数都有关")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R1-6")]),t._v(" "),s("p",[t._v("在一棵二叉搜索树上查找63，序列39、101、25、80、70、59、63是一种可能的查找时的结点值比较序列。F")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】二叉搜索树右子树小于根，左子树大于根，63大于39，所以接下来要往以39为根节点的左子树进行搜索，25肯定不会在以39为根节点的左子树上，所以该序列不可能")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R1-7")]),t._v(" "),s("p",[t._v("若一个结点是某二叉树的中序遍历序列的最后一个结点，则它必是该树的前序遍历序列中的最后一个结点。T")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】反例：无左子树的二叉树，中序遍历为 右子树根，最后一个结点为根节点，前序遍历为 根右子树，最后一个结点是在根的右子树上，不是该树的中序遍历的最后一个结点")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R1-8")]),t._v(" "),s("p",[t._v("算法分析的两个主要方面是时间复杂度和空间复杂度的分析。\tT")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】略")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R1-9")]),t._v(" "),s("p",[t._v("如果无向图G必须进行两次广度优先搜索才能访问其所有顶点，则G一定有2个连通分量。\tT")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】连通分量：即无向图的极大连通子图。无向图的一次广度优先搜索只能访问一个连通子图，如果必须进行两次广度优先搜索才能访问所有顶点，则肯定有2个连通分量，即一定有两个极大连通子图")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R1-10")]),t._v(" "),s("p",[t._v("若一个栈的输入序列为{1, 2, 3, 4, 5}，则不可能得到{3, 4, 1, 2, 5}这样的出栈序列。T")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】第一个3出栈，说明栈中还有1、2；第二个4出栈，说明4进栈后就出栈了，栈内还有1、2；第三个1出栈，发现无法出栈，此时顶部元素是2，出栈序列错误，故不可能得到{3, 4, 1, 2, 5}这样的出栈序列。")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R2-1")]),t._v(" "),s("p",[t._v("假设有5个整数以1、2、3、4、5的顺序被压入堆栈，且出栈顺序为3、5、4、2、1，那么为了获得这样的输出，堆栈大小至少为：B")]),t._v(" "),s("p",[t._v("A.2\tB.4\tC.3\tD.5")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】3出栈前，栈内有3个元素；5出栈前，栈内有4个元素；4出栈前，栈内有3个元素；2出栈前，栈内有2个元素；1出栈前，栈内有1个元素")]),t._v(" "),s("p",[t._v("故堆栈大小至少为4")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R2-2")]),t._v(" "),s("p",[t._v("带头结点的单链表"),s("code",[t._v("h")]),t._v("为空的判定条件是：B")]),t._v(" "),s("p",[t._v("A.\th == NULL;\tB.\th->next == NULL;\tC.\th != NULL;\tD.\th->next == h;")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】h为单链表的头结点，本身并无实际意义，而单链表为空，即单链表中没有数据，就只有一个头结点，所以 h->next =NULL;")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R2-3")]),t._v(" "),s("p",[t._v("对最小堆（小顶堆）{1,3,2,12,6,4,8,15,14,9,7,5,11,13,10} 进行三次删除最小元的操作后，结果序列为：A")]),t._v(" "),s("p",[t._v("A.\t4,6,5,12,7,10,8,15,14,9,13,11\tB.\t4,6,5,13,7,10,8,15,14,12,9,11")]),t._v(" "),s("p",[t._v("C.\t4,5,6,7,8,9,10,11,12,13,14,15\tD.\t4,5,6,12,7,10,8,15,14,13,9,11")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】最小堆：是一种经过排序的完全二叉树，其中任一非终端结点的数据值均不大于其左子节点和右子节点的值")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC%E9%99%88%E8%B6%8A%E4%BD%95%E9%92%A6%E9%93%AD%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842022%E5%A4%8F%E6%9C%9F%E4%B8%AD%E8%80%83%E8%AF%956.jpg",alt:"中国大学MOOC陈越何钦铭数据结构2022夏期中考试6"}})])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R2-4")]),t._v(" "),s("p",[t._v("设一段文本中包含字符{a, b, c, d, e}，其出现频率相应为{3, 2, 5, 1, 1}。则经过哈夫曼编码后，文本所占字节数为：A")]),t._v(" "),s("p",[t._v("A.\t25\tB.\t40\tC.\t12\tD.\t36")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】哈夫曼编码根据字符的出现频率，建立二叉树，且任一字符的编码都不会是别的字符的前驱")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC%E9%99%88%E8%B6%8A%E4%BD%95%E9%92%A6%E9%93%AD%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842022%E5%A4%8F%E6%9C%9F%E4%B8%AD%E8%80%83%E8%AF%957.jpg",alt:"img"}})])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R2-5")]),t._v(" "),s("p",[t._v("在一个不带头结点的非空链式队列中,假设f和r分别为队头和队尾指针,则插入s所指的结点运算是(C )。")]),t._v(" "),s("p",[t._v("A.\tf->next=s; f=s;\tB.\ts->next=f; f=s;\tC.\tr->next=s; r=s;\tD.\ts->next=s; r=s;")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】队列中对头负责删除元素，队尾负责插入元素，且队尾一直指向最后一个元素，即r指针指向最后一个元素，增加一个结点即在r指针的后面添加，并将队列的尾指针更新，指向最后一个元素")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R2-6")]),t._v(" "),s("p",[t._v("下列代码")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("for(i=0; i<n; i++)\n  for(j=i; j>0; j/=2)\n     printf(“%d\\n”, j);\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("的时间复杂度是：C")]),t._v(" "),s("p",[t._v("A.\t"),s("em",[t._v("O")]),t._v("("),s("em",[t._v("N")]),t._v("2)\tB.\t"),s("em",[t._v("O")]),t._v("("),s("em",[t._v("N")]),t._v(")\tC.\t"),s("em",[t._v("O")]),t._v("("),s("em",[t._v("Nl"),s("strong",[t._v("o")]),t._v("g")]),t._v("N)\tD.\t"),s("em",[t._v("O")]),t._v("("),s("em",[t._v("N")]),t._v("×"),s("em",[t._v("i")]),t._v(")")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】循环嵌套的时间复杂度是每层最多循环次数的乘积，for(i=0; i<n; i++)最多循环n次，for(j=i; j>0; j/=2)最多循环logN次，所以整个代码的时间复杂度是"),s("em",[t._v("O")]),t._v("("),s("em",[t._v("Nl"),s("strong",[t._v("o")]),t._v("g")]),t._v("N)")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R2-7")]),t._v(" "),s("p",[t._v("一棵二叉树中，双分支结点数为15，单分支结点数为30，则叶子结点数为（B）个。")]),t._v(" "),s("p",[t._v("A.\t15\tB.\t16\tC.\t17\tD.\t47")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】参考R1-4，n0 = n2+1 = 15 + 1 = 16")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R2-8")]),t._v(" "),s("p",[t._v("将{5, 2, 7, 3, 4, 1, 6}依次插入初始为空的二叉搜索树。则该树的后序遍历结果是：D")]),t._v(" "),s("p",[t._v("A.\t5, 4, 3, 7, 6, 2, 1\tB.\t1, 4, 2, 6, 3, 7, 5")]),t._v(" "),s("p",[t._v("C.\t1, 2, 3, 4, 6, 7, 5\tD.\t1, 4, 3, 2, 6, 7, 5")]),t._v(" "),s("p",[t._v("答案错误：0 分")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC%E9%99%88%E8%B6%8A%E4%BD%95%E9%92%A6%E9%93%AD%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842022%E5%A4%8F%E6%9C%9F%E4%B8%AD%E8%80%83%E8%AF%958.jpg",alt:"img"}})])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R2-9")]),t._v(" "),s("p",[t._v("下列哪个函数是"),s("em",[t._v("O")]),t._v("("),s("em",[t._v("N")]),t._v(")的？D")]),t._v(" "),s("p",[t._v("A.\t2"),s("em",[t._v("Nl"),s("strong",[t._v("o")]),t._v("g")]),t._v("N\tB.\t"),s("em",[t._v("l"),s("strong",[t._v("o")]),t._v("g")]),t._v("N^2\tC.\t"),s("em",[t._v("N")]),t._v("2/2\tD.\t"),s("em",[t._v("N")]),t._v("("),s("em",[t._v("l"),s("strong",[t._v("o")]),t._v("g")]),t._v("N)^2")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("[解析] ("),s("em",[t._v("l"),s("strong",[t._v("o")]),t._v("g")]),t._v("N)^2, logN默认是以2为底的log函数，平方后 = N")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R2-10")]),t._v(" "),s("p",[t._v("在并查集问题中，已知集合元素0~8所对应的父结点编号值分别是{ 1, -4, 1, 1, -3, 4, 4, 8, -2 }（注：−"),s("em",[t._v("n")]),t._v("表示树根且对应集合大小为"),s("em",[t._v("n")]),t._v("），那么将元素6和8所在的集合合并（要求必须将小集合并到大集合）后，该集合对应的树根和父结点编号值分别是多少？A")]),t._v(" "),s("p",[t._v("A.\t4和-5\tB.\t1和-6\tC.\t8和-6\tD.\t8和-5")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】并查集是一种树型的数据结构，用于处理一些不相交集合（disjoint sets）的合并及查询问题。常常在使用中以森林来表示。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC%E9%99%88%E8%B6%8A%E4%BD%95%E9%92%A6%E9%93%AD%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842022%E5%A4%8F%E6%9C%9F%E4%B8%AD%E8%80%83%E8%AF%959.jpg",alt:"img"}})])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R2-11")]),t._v(" "),s("p",[t._v("已知一棵完全二叉树的第6层（设根为第1层）有8个叶结点，则该完全二叉树的结点个数最多是：D")]),t._v(" "),s("p",[t._v("A.\t52\tB.\t119\tC.\t39\tD.\t111")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】题目为完全二叉树，且第6层有8个叶子结点，因为是求最多的结点个数，故该树应该有七层，前六层是‘满’的，第七层少了16（8*2）个结点，故总结点数为1 + 2 + 4 + 8 + 16 + 32 + （64 - 16） = 111个")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R2-12")]),t._v(" "),s("p",[t._v("若某图的深度优先搜索序列是{V2, V0, V4, V3, V1}，则下列哪个图不可能对应该序列？B")]),t._v(" "),s("p",[t._v("A.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC%E9%99%88%E8%B6%8A%E4%BD%95%E9%92%A6%E9%93%AD%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842022%E5%A4%8F%E6%9C%9F%E4%B8%AD%E8%80%83%E8%AF%952.jpg",alt:"img"}})]),t._v(" "),s("p",[t._v("B.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC%E9%99%88%E8%B6%8A%E4%BD%95%E9%92%A6%E9%93%AD%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842022%E5%A4%8F%E6%9C%9F%E4%B8%AD%E8%80%83%E8%AF%953.jpg",alt:"img"}})]),t._v(" "),s("p",[t._v("C.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC%E9%99%88%E8%B6%8A%E4%BD%95%E9%92%A6%E9%93%AD%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842022%E5%A4%8F%E6%9C%9F%E4%B8%AD%E8%80%83%E8%AF%954.jpg",alt:"img"}})]),t._v(" "),s("p",[t._v("D.")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC%E9%99%88%E8%B6%8A%E4%BD%95%E9%92%A6%E9%93%AD%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842022%E5%A4%8F%E6%9C%9F%E4%B8%AD%E8%80%83%E8%AF%955.jpg",alt:"img"}})]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】图的深度优先搜索（dfs）指在搜索的时候，如果遇到一个结点既有子节点，又有兄弟结点，先找子节点，再找兄弟结点。选项B中按深度优先搜索序列应该是{V2,V0,V3,V4,V1}或{V2,V4,V1,V0,V3}，不符合题意")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R5-1")]),t._v(" "),s("p",[t._v("单链表逆转")]),t._v(" "),s("p",[t._v("下列代码的功能是返回带头结点的单链表"),s("code",[t._v("L")]),t._v("的逆转链表。")]),t._v(" "),s("div",{staticClass:"language-C line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[t._v("List "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Reverse")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" List L "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Position Old_head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" New_head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    New_head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Old_head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" L"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" Old_head "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Temp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Old_head"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" 分"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  Old_head"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" New_head\n        New_head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Old_head"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  \n        Old_head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" 分"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" L"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" New_head\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" L"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6MOOC%E9%99%88%E8%B6%8A%E4%BD%95%E9%92%A6%E9%93%AD%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842022%E5%A4%8F%E6%9C%9F%E4%B8%AD%E8%80%83%E8%AF%9510.jpg",alt:"img"}})])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("R5-2")]),t._v(" "),s("p",[t._v("大顶堆的下滤")]),t._v(" "),s("p",[t._v("下列代码的功能是从一个大顶堆"),s("code",[t._v("H")]),t._v("的某个指定位置"),s("code",[t._v("p")]),t._v("开始执行下滤。")]),t._v(" "),s("div",{staticClass:"language-C line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("PercolateDown")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" PriorityQueue H "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("  child"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   ElementType  Tmp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" H"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" H"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Size"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" child "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      child "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" child"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("H"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" 分 H"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("child"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("H"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("child"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         child"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" H"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("child"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" Tmp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" 分"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" H"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" H"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("child"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   H"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v("Elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Tmp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("点击查看")]),t._v(" "),s("p",[t._v("【解析】参考R2-3")])]),t._v(" "),s("hr")])}),[],!1,null,null,null);s.default=v.exports}}]);