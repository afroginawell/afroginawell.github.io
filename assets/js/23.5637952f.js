(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{348:function(a,v,t){"use strict";t.r(v);var e=t(4),n=Object(e.a)({},(function(){var a=this,v=a._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h1",{attrs:{id:"maven概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#maven概述"}},[a._v("#")]),a._v(" maven概述")]),a._v(" "),v("p",[a._v("Maven 是一个项目管理工具，可以对 Java 项目进行自动化的构建和依赖管理。")]),a._v(" "),v("p",[a._v("Maven 的正确发音是"),v("a",{attrs:{href:"%E7%BE%8E%E6%96%87"}},[a._v("ˈmeɪvn")]),a._v("，Maven 在美国是一个口语化的词语，代表专家、内行的意思，约等于北京话中的老炮儿。")]),a._v(" "),v("p",[a._v("仅从技术方面来说，Maven 提供了一种思想让团队更科学的管理和构建项目。")]),a._v(" "),v("ul",[v("li",[a._v('Maven 采用配置文件的方式对项目的名称、版本号、项目依赖等等信息进行描述，使之结构清晰。在项目构建时，利用 Maven 的 "约定大于配置" 的思想，实现自动化的构建。')]),a._v(" "),v("li",[a._v("另外，一个项目往往依赖于其他的项目和第三方的组件才能顺利完成，Maven 提供了仓库的功能，让这些依赖项放进仓库中，项目可以随时从仓库中去取，如果其他项目组也需要这些依赖，同样也可以从仓库中去取，不必每个人去开源项目的站点去苦苦搜寻了。")])]),a._v(" "),v("div",{staticClass:"custom-block note"},[v("p",{staticClass:"custom-block-title"},[a._v("什么是项目构建？")]),a._v(" "),v("p",[a._v("构建就是软件项目生产的整个过程，这个过程应该包括：")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("文档和代码的生成（有些项目会使用代码自动生成工具，比如数据库访问代码的逆向工程）")])]),a._v(" "),v("li",[v("p",[a._v("代码的编译、测试和打包")])]),a._v(" "),v("li",[v("p",[a._v("打包好的代码进行分发或者部署")])])]),a._v(" "),v("p",[a._v("Maven可以使得整个项目在构建中的这些过程能够进行良好的定义，并且Maven能够帮我们串起来形成一个自动构建过程。")])]),a._v(" "),v("div",{staticClass:"custom-block tip"},[v("p",{staticClass:"custom-block-title"},[a._v("小知识")]),a._v(" "),v("p",[a._v("Maven 曾是 Jakarta 项目的子项目，后来成为由 Apache 软件基金会主持的独立 Apache 项目。在Java世界里，Jakarta 项目犹如长城一般的存在，铸就了丰功伟业。在Apache建立伊始，源码界犹如混沌未开化的洪荒之地，长满C/C++的杂草，而Java刚刚漏出新芽。 当时Apache组织里面有很多C语言开发的项目，Java还是一门小众语言。为了发展Java Web项目，一群有志之士聚集在一起，启动了Jakarta项目。 后来，Java变得非常的火爆，以至于Jakarta项目囊括了众多基于Java语言的开源软件。最后，不得不把个别项目从Jakarta中独立出来，成为Apache软件基金会的顶级项目，例如：Struts，HttpClient，Tomcat，Ant，Maven，JMeter，Velocity，JMeter，Commons等。一直到2011年12月，在所有子项目都被迁移为独立项目后，Jakarta名称就不再使用了。")]),a._v(" "),v("p",[a._v("Maven诞生之初的目的是为了管理Java项目，后来 Maven 也可被用于构建和管理其他各种项目，例如 C#，Ruby，Scala等语言编写的项目。")]),a._v(" "),v("p",[a._v("在 Maven 出现之前，Java 世界的项目管理工具一直由 Ant 统治着。而在此之后，又有 Gradle 逐渐在 Android 项目中作为配套打包工具流行开来。在目前看来，Maven 依旧是 Java 世界项目管理工具中的王者。")])]),a._v(" "),v("p",[v("strong",[a._v("Maven的组成")])]),a._v(" "),v("ul",[v("li",[a._v("项目对象模型（POM，Project Object Model）")]),a._v(" "),v("li",[a._v("项目生命周期（Project Lifecycle）")]),a._v(" "),v("li",[a._v("依赖管理系统（Dependency Management System）")]),a._v(" "),v("li",[a._v("各种插件，主要用来实现生命周期各个阶段（phase）的目标（goal）")])]),a._v(" "),v("p",[v("img",{attrs:{src:"/img/maven%E6%A6%82%E8%BF%B01.png",alt:"maven概述1"}})]),a._v(" "),v("p",[v("strong",[a._v("项目依赖管理")])]),a._v(" "),v("p",[a._v("由于Java中的各种Jar包比较复杂，尤其当项目本身就很复杂的情况下，对Jar包的管理就会是一件极其麻烦的事情。")]),a._v(" "),v("p",[a._v("Maven 的出现让我们获得了解脱，Maven 可以自动帮我们做依赖管理，我们需要做的就是在 POM 文件里指定依赖 Jar 包的名称、版本号，Maven 会自动下载，并递归地去下载依赖的进一步依赖。")]),a._v(" "),v("p",[a._v("Maven 还提供一个非常方便的功能---快照依赖。快照依赖指的是那些还在开发中的内部依赖包。与其你经常地更新版本号来获取最新版本，不如直接依赖项目的快照版本。快照版本的每一个 Build 版本都会被下载到本地仓库，即使该快照版本已经在本地仓库了。使用快照依赖可以确保本地仓库中的每一个 Build 版本都是最新的，这对我们快速迭代开发是一个非常酷的特性。")])])}),[],!1,null,null,null);v.default=n.exports}}]);