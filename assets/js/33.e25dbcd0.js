(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{356:function(t,s,a){"use strict";a.r(s);var n=a(4),_=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"python5-6章练习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python5-6章练习"}},[t._v("#")]),t._v(" Python5~6章练习")]),t._v(" "),s("p",[t._v("1.(单选题) 以下哪个属于可变对象 (  B  )。")]),t._v(" "),s("p",[t._v("A.\t数值类型(int,float);\tB.\tlist;\tC.\ttuple;\tD.\tstr;")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("【解析】")]),t._v(" "),s("p",[t._v("Python 在 heap 中分配的对象分成两类：可变对象和不可变对象。所谓可变对象是指，对象的内容是可变的，例如 list。而不可变的对象则相反，表示其内容不可变。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("不可变对象 ：int，string，float，tuple   -- 可理解为C中，该参数为值传递\n可变对象   ：list，dictionary           -- 可理解为C中，该参数为指针传递\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("2.(单选题) x = 13,y=-13,执行语句x,y=y,x后，变量x的值为（ C ）。")]),t._v(" "),s("p",[t._v("A.\t13;\tB.\t0;\tC.\t-13;\tD.\t出错;")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("【解析】")]),t._v(" "),s("p",[t._v("x,y=y,x是python中典型的值交换语句，即将y的原本值给x，x的原本值给y，")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("3.(单选题) 以下关于函数参数的描述,正确的是（ D ）")]),t._v(" "),s("p",[t._v("A.\t采用名称传参的时候,实参的顺序需要和形参的顺序一致;")]),t._v(" "),s("p",[t._v("B.\t调用带有默认值参数的函数时,必须使用函数定义时设置的默认值;")]),t._v(" "),s("p",[t._v("C.\t在函数内部直接修改形参的值会影响外部实参的值;")]),t._v(" "),s("p",[t._v("D.\tPython支持按照位置和名称传参,也支持可变数量传参;")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("【解析】")]),t._v(" "),s("p",[t._v("A中都使用名称传参了，那和位置还有啥关系。")]),t._v(" "),s("p",[t._v("B中不是必须使用，函数定义时设置的默认值在未有对应的传参的时候才会使用")]),t._v(" "),s("p",[t._v("C中python中分为可变和不可变对象，可变对象会影响。")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("4.(单选题) 关于 python 导入类，下列描述正确的是？（  C  ）")]),t._v(" "),s("p",[t._v("A.\t一次性导入所有类，这样后续方便处理。")]),t._v(" "),s("p",[t._v("B.\t不能在在一个模块中导入多个类。")]),t._v(" "),s("p",[t._v("C.\t导入类可以把大部分逻辑存储在独立的文件中，然后在主程序中编写高级逻辑。")]),t._v(" "),s("p",[t._v("D.\t同一个模块中的类，即使完全不相关，也没有关系。")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("【解析】")]),t._v(" "),s("p",[t._v("A一次性导入所有类，并不提倡，会增加资源消耗")]),t._v(" "),s("p",[t._v("B可以在一个模块中导入多个类")]),t._v(" "),s("p",[t._v("D不可以的，与模块的概念不符，模块本身就是相关类的聚合")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("5.(单选题)  可以避免类型错误的函数是？（  A  ）。")]),t._v(" "),s("p",[t._v("A.\tstr();\tB.\tvars();\tC.\ttype();\tD.\tchr();")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("【解析】")]),t._v(" "),s("p",[t._v("将所有类型转换为str类型，就不会出现错误了")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("6.(单选题) 关于Python的lambda函数,以下选项中描述错误的是（ B ）。")]),t._v(" "),s("p",[t._v("A.\t可以使用lambda函数定义列表的排序原则;")]),t._v(" "),s("p",[t._v("B.\tf = lambda x,y:x+y 执行后,f的类型为数字类型;")]),t._v(" "),s("p",[t._v("C.\tlambda函数将函数名作为函数结果返回;")]),t._v(" "),s("p",[t._v("D.\tlambda用于定义简单的、能够在一行内表示的函数;")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("【解析】")]),t._v(" "),s("p",[t._v("B中f的类型很显然是function（函数）")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("7.(单选题) 下面代码的输出结果是（A）")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("r "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lambda")]),t._v(" num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("A.\t1;\tB.\t2;\tC.\t2.5;\tD.\t5;")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("8.(单选题) 以下关于函数说法错误的是（ C ）。")]),t._v(" "),s("p",[t._v("A.\t函数可以看做是一段具有名字的子程序;")]),t._v(" "),s("p",[t._v("B.\t函数通过函数名来调用;")]),t._v(" "),s("p",[t._v("C.\t对函数的使用必须了解其内部实现原理;")]),t._v(" "),s("p",[t._v("D.\t函数是一段具有特定功能的、可重用的语句组;")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("【解析】")]),t._v(" "),s("p",[t._v("C中对函数的使用注重外部的调用方法，对内部的使用并不关心，写函数本身就是为了封装内部实现原理")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("9.(单选题) 下面代码的输出结果是（ A ）。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" \nb "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" \nc "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("pow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" –"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("A.\t-104;\tB.\t36;\tC.\t104;\tD.\t系统报错;")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("10.(单选题) 下面代码的输出结果是（ A ）。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" \nm"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("func"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("A.\tNone;\tB.\tNull;\tC.\t1000000;\tD.\t出错;")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("【注释】")]),t._v(" "),s("p",[t._v("func并没有设置返回数，func(m)运行完返回None，print自然也是输出返回的None。")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("11.(单选题) range() 函数的作用，描述正确的是？（  B  ）")]),t._v(" "),s("p",[t._v("A.\t可以将结果转换为列表;\tB.\t生成一系列的数字;")]),t._v(" "),s("p",[t._v("C.\t可以解析列表;\tD.\t可以统计计算;")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("12.(单选题) 关于 python 类继承，下列描述错误的是？（  B  ）")]),t._v(" "),s("p",[t._v("A.\t定义子类的实例时， 可以通过子类的 init() 方法，给父类的所有属性赋值。")]),t._v(" "),s("p",[t._v("B.\t对于继承而来的父类方法， 如果它不符合子类所期望的行为，那么就必须建立新的类。")]),t._v(" "),s("p",[t._v("C.\tsuper() 是一个特殊函数， 它会把父类和子类关联起来。")]),t._v(" "),s("p",[t._v("D.\t子类除了拥有继承父类而来的属性和方法之外，还可以自定义子类自己的属性和方法。")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("【解析】")]),t._v(" "),s("p",[t._v("B中不需要建立新的类，只需要把父类的方法重写即可")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("13.(单选题) 实现以下哪个方法可以让对象像函数一样被调用 (  C  )。")]),t._v(" "),s("p",[t._v("A.\tstr();\tB.\titer();\tC.\tcall();\tD.\tnext();")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("14.(单选题) 下列程序的输出结果为（ C  ）。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b \n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n    a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" \n    b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \nmain"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("A.\t10 10;\tB.\t11 11;\tC.\t10 11;\tD.\t11 10;")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("15.(单选题) 以下哪个不属于面向对象的特征 (  D   )。")]),t._v(" "),s("p",[t._v("A.\t封装;\tB.\t继承;\tC.\t多态;\tD.\t复合;")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("16.(单选题) x = [1, 2, 3, 4, 5, 6, 7]，则执行x.pop(3) 后x 值为（ B ）。")]),t._v(" "),s("p",[t._v("A.\t[1, 2, 3，4, 5, 6, 7];\tB.\t[1, 2, 3, 5, 6, 7];")]),t._v(" "),s("p",[t._v("C.\t[1, 2，4, 5, 6, 7];\tD.\t[4, 5, 6, 7];")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("17.(单选题) 以下程序的输出结果是（ C ）。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" b\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s\nt "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" func"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"t="')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("A.\tt=8;\tB.\tt=3;\tC.\tt=-3;\tD.\t有错;")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("18.(单选题) 下面代码的输出结果是（ B ）。")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("pow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("A.\t12;\tB.\t1024;\tC.\t100;\tD.\t20;")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("19.(填空题) 在函数内部可以通过关键字"),s("u",[t._v("global")]),t._v("来定义全局变量。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("20.(填空题) 已知 g = lambda x, y=3, z=5: x * y * z，则语句 print(g(1)) 的输出结果为"),s("u",[t._v("15")]),t._v("。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("21.(填空题)  Python标准库math中用来计算平方根的函数是"),s("u",[t._v("sqrt()")]),t._v("。")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("22.(判断题) Python支持多继承，如果父类中有相同的方法名，而在子类中调用时没有指定父类名，则Python解释器将从左向右按顺序进行搜索。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("23.(判断题)  定义类时如果实现了 len ()方法，该类对象即可支持内置函数len()。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("24.(判断题) 在Python中定义类时实例方法的第一个参数名称必须是self。错")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("【解析】")]),t._v(" "),s("p",[t._v("Python中，在类中定义实例方法时将第一个参数定位“self”只是一个习惯，而实际上不必须使用“self”这个名字，尽管如此，建议编写代码时仍以self作为方法的第一个参数名")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("25.(判断题) 对于Python类中的私有成员，可以通过“对象名._类名__私有成员名”的方式来访问。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("26.(判断题) 在派生类中可以通过“基类名.方法名()”的方式来调用基类中的方法。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("27.(判断题) 在Python中可以为自定义类的对象动态增加新成员。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("28.(判断题) 在Python中定义类时实例方法的第一个参数名称不管是什么，都表示对象自身。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("29.(判断题) 只可以动态为对象增加数据成员，而不能为对象动态增加成员方法。错")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("30.(判断题) 如果在设计一个类时实现类 len __()方法，那么该类的对象会自动支持Python内置函数len()。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("31.(判断题) 在Python中函数和类都属于可调用对象。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("32.(判断题) 定义类时，在一个方法前面使用@classmethod进行修饰，则该方法属于类方法。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("33.(判断题) 通过对象不能调用类方法和静态方法。错")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("【解析】")]),t._v(" "),s("p",[t._v("对象可以调用类方法和静态方法。")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("34.(判断题)  Python中没有严格意义上的私有成员。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("35.(判断题) Python类不支持多继承。错")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("【解析】")]),t._v(" "),s("p",[t._v("Python语法上支持多继承，但是却不推荐使用多继承")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("36.(判断题)  任何包含__ call ()方法的类的对象都是可调用的。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("37.(判断题) 在面向对象程序设计中，函数和方法是完全一样的，都必须为所有参数进行传值。错")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("【解析】")]),t._v(" "),s("p",[t._v("python中的方法参数值可以设置默认值，不一定需要传值")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("38.(判断题) 在设计派生类时，基类的私有成员默认是不会继承的。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("39.(判断题) 定义类时，在一个方法前面使用@staticmethod进行修饰，则该方法属于静态方法。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("40.(判断题) 在类定义的外部没有任何办法可以访问对象的私有成员。错")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("【解析】")]),t._v(" "),s("p",[t._v("Python中没有严格意义上的私有成员，可以通过“对象名._类名__私有成员名”的方式来访问")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("41.(判断题) Python中一切内容都可以称为对象。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("42.(判断题) Python类的构造方法是 __ init __()。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("43.(判断题) 定义类时实现了 eq ()方法，该类对象即可支持运算符==。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("44.(判断题)  如果定义类时没有编写析构函数，Python将提供一个默认的析构函数进行必要的资源清理工作。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("45.(判断题) 在Python中定义类时，如果某个成员名称前有2个下划线则表示是私有成员。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("46.(判断题) 函数和对象方法是一样的，内部实现和外部调用都没有任何区别。错")]),t._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[t._v("【解析】")]),t._v(" "),s("p",[t._v("内部实现和外部调用肯定是有区别的")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("47.(判断题)  通过对象能调用类方法和静态方法。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("48.(判断题) 属性可以像数据成员一样进行访问，但赋值时具有方法的优点，可以对新值进行检查。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("49.(判断题) 在Python中定义类时，运算符重载是通过重写特殊方法实现的。例如，在类中实现了__ mul __()方法即可支持该类对象的*运算符。对")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("50.(判断题) 定义类时所有实例方法的第一个参数用来表示对象本身，在类的外部通过对象名来调用实例方法时不需要为该参数传值。对")]),t._v(" "),s("hr")])}),[],!1,null,null,null);s.default=_.exports}}]);