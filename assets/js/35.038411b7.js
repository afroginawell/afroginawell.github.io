(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{358:function(t,a,s){"use strict";s.r(a);var i=s(4),e=Object(i.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"本地git安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地git安装"}},[t._v("#")]),t._v(" 本地git安装")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("使用的git版本是Git-2.35.1.2-64-bit.exe，本文详细介绍了如何在本地安装git，本文搬运于"),a("a",{attrs:{href:"https://blog.csdn.net/mukes/article/details/115693833",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSDN博主「mukes」的原创文章"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"_1-下载git的安装包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-下载git的安装包"}},[t._v("#")]),t._v(" 1.下载git的安装包")]),t._v(" "),a("p",[t._v("这个就需要去 Git 官网下载对应系统的软件了，下载地址为 git-scm.com或者gitforwindows.org 上面的 git-scm 是 Git 的官方，里面有不同系统不同平台的安装包和源代码，而 gitforwindows.org 里只有 windows 系统的安装包")]),t._v(" "),a("h2",{attrs:{id:"_2-git的安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-git的安装"}},[t._v("#")]),t._v(" 2.git的安装")]),t._v(" "),a("h3",{attrs:{id:"_1-使用许可声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-使用许可声明"}},[t._v("#")]),t._v(" 1）使用许可声明")]),t._v(" "),a("p",[t._v("双击下载后的 Git-2.35.1.2-64-bit.exe，开始安装，这个界面主要展示了 GPL 第 2 版协议1的内容，点击 [next] 到第二步。")]),t._v(" "),a("h3",{attrs:{id:"_2-选择安装目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-选择安装目录"}},[t._v("#")]),t._v(" 2）选择安装目录")]),t._v(" "),a("p",[t._v("可点击 “Browse…” 更换目录，也可直接在方框里面改，我一般直接将 “C” 改为 “D”，这样就直接安装在 D 盘里了。点击 [next] 到第三步。")]),t._v(" "),a("h3",{attrs:{id:"_3-选择安装组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-选择安装组件"}},[t._v("#")]),t._v(" 3）选择安装组件")]),t._v(" "),a("p",[t._v("图中这些英文都比较简单，大家可以翻译一下，根据自己的需要选择勾选。点击 [next] 到第四步。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("如果要选择“（NEW!）Add a Git BBash Profile to Windows Terminal”需要下载Windows Terminal配合Git Bash使用")])]),t._v(" "),a("h3",{attrs:{id:"_4-选择开始菜单文件夹"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-选择开始菜单文件夹"}},[t._v("#")]),t._v(" 4）选择开始菜单文件夹")]),t._v(" "),a("p",[t._v('方框内 Git 可改为其他名字，也可点击 “Browse...” 选择其他文件夹或者给"Don\'t create a Start Menu folder" 打勾不要文件夹，点击 [next] 到第五步。')]),t._v(" "),a("p",[t._v("安装完成后可以在开始菜单里进行查看")]),t._v(" "),a("h3",{attrs:{id:"_5-选择git默认编辑器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-选择git默认编辑器"}},[t._v("#")]),t._v(" 5）选择Git默认编辑器")]),t._v(" "),a("p",[t._v("Git 安装程序里面内置了 10 种编辑器供你挑选，比如 Atom、Notepad、Notepad++、Sublime Text、Visual Studio Code、Vim 等等，默认的是 Vim ，选择 Vim 后可以直接进行到下一步，但是 Vim 是纯命令行，操作有点难度，需要学习。如果选其他编辑器，则还需要去其官网安装后才能进行下一步。")]),t._v(" "),a("p",[t._v('如果你不想用 Vim 当默认编辑器，换一个，比如 Notepad++ ，那么你者需要点击下面的蓝色字体 " Notepad++ " 去其官网下载安装好才能进行下一步 [next].')]),t._v(" "),a("p",[t._v("安装后还要配置在我的电脑->属性->高级系统设置->高级->环境变量->系统变量->Path->编辑添加 Notepad++ 的安装地址，如 C:\\Program Files\\notepad++.\n这样才能在 Git Bash 里面直接调用 Notepad++。")]),t._v(" "),a("div",{staticClass:"language-git line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-git"}},[a("code",[t._v("$ notepad++ 文件名.后缀 // 在git bash 调用notepad++ 打开文件\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("新手建议使用 Notepad++ 、Sublime Text，这两个比 Windows 自带的记事本功能多太多了。点击 [next] 到第六步。")]),t._v(" "),a("h3",{attrs:{id:"_6-决定初始化新项目-仓库-的主干名字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-决定初始化新项目-仓库-的主干名字"}},[t._v("#")]),t._v(" 6）决定初始化新项目（仓库）的主干名字")]),t._v(" "),a("p",[t._v("第一种是让 Git 自己选择，名字是 master ，但是未来也有可能会改为其他名字；第二种是我们自行决定，默认是 main，当然，你也可以改为其他的名字。一般默认第一种，点击 [next] 到第七步。\n注： 第二个选项下面有个 NEW！ ，说很多团队已经重命名他们的默认主干名为 main . 这是因为2020 年非裔男子乔治·弗洛伊德因白人警察暴力执法惨死而掀起的 Black Lives Matter(黑人的命也是命)运动，很多人认为 master 不尊重黑人，呼吁改为 main.")]),t._v(" "),a("h3",{attrs:{id:"_7-调整你的path环境变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-调整你的path环境变量"}},[t._v("#")]),t._v(" 7）调整你的path环境变量")]),t._v(" "),a("p",[t._v("第一种是仅从 Git Bash 使用 Git。这个的意思就是你只能通过 Git 安装后的 Git Bash 来使用 Git ，其他的什么命令提示符啊等第三方软件都不行。\n第二种是从命令行以及第三方软件进行 Git。这个就是在第一种基础上进行第三方支持，你将能够从 Git Bash，命令提示符(cmd) 和 Windows PowerShell 以及可以从 Windows 系统环境变量中寻找 Git 的任何第三方软件中使用 Git。推荐使用这个。\n第三种是从命令提示符使用 Git 和可选的 Unix 工具。选择这种将覆盖 Windows 工具，如 “ find 和 sort ”。只有在了解其含义后才使用此选项。一句话，适合比较懂的人折腾。")]),t._v(" "),a("h3",{attrs:{id:"_8-选择ssh执行文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-选择ssh执行文件"}},[t._v("#")]),t._v(" 8）选择SSH执行文件")]),t._v(" "),a("p",[t._v("按默认的来吧")]),t._v(" "),a("h3",{attrs:{id:"_9-选择https后端传输"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-选择https后端传输"}},[t._v("#")]),t._v(" 9）选择HTTPS后端传输")]),t._v(" "),a("p",[t._v("如果在具有企业管理证书的组织中使用 Git，则将需要使用安全通道。如果你仅使用 Git 来访问公共存储库（例如 GitHub ），或者你的组织不管理自己的证书，那么使用 SSL 后端（它们只是同一协议的不同实现）就可以了。")]),t._v(" "),a("p",[t._v("也就是说，作为普通用户，只是用 Git 来访问 Github、GitLab 等网站，选择前者就行了。点击 [next] 到第十步。")]),t._v(" "),a("h3",{attrs:{id:"_10-配置行尾符号转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-配置行尾符号转换"}},[t._v("#")]),t._v(" 10）配置行尾符号转换")]),t._v(" "),a("p",[t._v("这三种选择分别是：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("签出 Windows 样式，提交 Unix 样式的行结尾。")])]),t._v(" "),a("li",[a("p",[t._v("按原样签出，提交Unix样式的行结尾。")])]),t._v(" "),a("li",[a("p",[t._v("按原样签出，按原样提交。")])])]),t._v(" "),a("p",[t._v("那 Windows 样式和 Unix 样式到底有什么区别呢？")]),t._v(" "),a("p",[t._v("引用 《GitHub 入门与实践》 第 50 页内容2")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(" GitHub 中公开的代码大部分都是以 Mac 或 Linux 中的 LF（Line Feed）换行。然而，由于 Windows 中是以 CRLF（Carriage Return+ Line Feed）换行的，所以在非对应的编辑器中将不能正常显示。   Git 可以通过设置自动转换这些换行符。使用 Windows 环境的各位，请选择推荐的 “Checkout Windows-style，commit Unix-style line endings” 选项。换行符在签出时会自动转换为 CRLF，在提交时则会自动转换为 LF . \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("上面说 Mac 、Linux、Unix 的 Line Feed ，翻译过来就是换行符，用 “\\n” 表示，换行符 “\\n” 的 ASCII 值为10； Windows 的是 Carriage Return+ Line Feed（回车+换行），用 “\\r\\n” 表示，回车符 “\\r” 的 ASCII 值为13；\n这上下两者是不一样的。 所以这就需要转换了，至于为什么选第一项？ 这还用问吗？我们现在的教程就是介绍怎么安装 Windows 版 Git，肯定选第一项啦。\n至于 “回车”（carriage return）和 “换行”（line feed）这两个概念的来历和区别？ 引用一下 阮一峰老师博客的部分内容")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(' 在计算机还没有出现之前，有一种叫做电传打字机（Teletype Model 33）的玩意，每秒钟可以打 10 个字符。但是它有一个问题，就是打字机打完一行换行的时候，要用去 0.2 秒，正好可以打两个字符。要是在这 0.2 秒里面，又有新的字符传过来，那么这个字符将丢失。 于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做 "回车"，告诉打字机把打印头定位在左边界；另一个叫做 "换行"，告诉打字机把纸向下移一行。\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"_11-配置终端模拟器以与git-bash一起使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-配置终端模拟器以与git-bash一起使用"}},[t._v("#")]),t._v(" 11）配置终端模拟器以与Git Bash一起使用")]),t._v(" "),a("p",[t._v("建议选择第一种，MinTTY 3功能比 cmd 多，cmd 只不过 比 MinTTY 更适合处理 Windows 的一些接口问题，这个对 Git 用处不大，除此之外 Windows 的默认控制台窗口（cmd）有很多劣势，比如 cmd 具有非常有限的默认历史记录回滚堆栈和糟糕的字体编码等等。 相比之下，MinTTY 具有可调整大小的窗口和其他有用的可配置选项，可以通过右键单击的工具栏来打开它们 git-bash 。点击 [next] 到第十二步。")]),t._v(" "),a("h3",{attrs:{id:"_12-选择默认的-git-pull-行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-选择默认的-git-pull-行为"}},[t._v("#")]),t._v(" 12）选择默认的“git pull”行为")]),t._v(" "),a("p",[t._v("“git pull” 是什么意思呢？ git pull 就是获取最新的远程仓库分支到本地，并与本地分支合并")]),t._v(" "),a("p",[t._v("上面给了三个 “git pull” 的行为： 第一个是 merge 第二个是 rebase 第三个是 直接获取")]),t._v(" "),a("p",[t._v("第一种 git pull = git fetch + git merge")]),t._v(" "),a("p",[t._v("第二种 git pull = git fetch + git rebase")]),t._v(" "),a("p",[t._v("第三种 git pull = git fetch ？(这个没试过，纯属猜测）")]),t._v(" "),a("p",[t._v("一般默认选择第一项，git rebase 绝大部分程序员都用不好或者不懂，而且风险很大，但是很多会用的人也很推崇，但是用不好就是灾难。")]),t._v(" "),a("p",[t._v("git pull 只是拉取远程分支并与本地分支合并，而 git fetch 只是拉取远程分支，怎么合并，选择 merge 还是 rebase ，可以再做选择。")]),t._v(" "),a("h3",{attrs:{id:"_13-选择一个凭证帮助程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-选择一个凭证帮助程序"}},[t._v("#")]),t._v(" 13）选择一个凭证帮助程序")]),t._v(" "),a("p",[t._v("一共两个选项：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Git 凭证管理")])]),t._v(" "),a("li",[a("p",[t._v("不使用凭证助手")])])]),t._v(" "),a("p",[t._v("第一个选项是提供登录凭证帮助的，Git 有时需要用户的凭据才能执行操作；例如，可能需要输入用户名和密码才能通过 HTTP 访问远程存储库（GitHub，GItLab 等等）。")]),t._v(" "),a("p",[t._v("点击 [next] 进到十四步。")]),t._v(" "),a("h3",{attrs:{id:"_14-配置额外的选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-配置额外的选项"}},[t._v("#")]),t._v(" 14）配置额外的选项")]),t._v(" "),a("p",[t._v("有两个选项：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("启用文件系统缓存")])]),t._v(" "),a("li",[a("p",[t._v("启用符号链接")])])]),t._v(" "),a("p",[t._v("启用文件系统缓存就是将批量读取文件系统数据并将其缓存在内存中以进行某些操作，可以显著提升性能。这个选项默认开启。")]),t._v(" "),a("p",[t._v("启用符号链接 ，符号链接是一类特殊的文件， 其包含有一条以绝对路径或者相对路径的形式指向其它文件或者目录的引用，类似于 Windows 的快捷方式，不完全等同 类Unix（如 Linux） 下的 符号链接。因为该功能的支持需要一些条件，所以默认不开启。")]),t._v(" "),a("p",[t._v("点击 [next] 到第十五步。")]),t._v(" "),a("h3",{attrs:{id:"_15-配置实验性选项"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-配置实验性选项"}},[t._v("#")]),t._v(" 15）配置实验性选项")]),t._v(" "),a("p",[t._v("这是实验性功能，可能会有一些小错误之类的，建议不用开启。")]),t._v(" "),a("p",[t._v("点击 [install] 进行安装。")]),t._v(" "),a("h2",{attrs:{id:"链接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/mukes/article/details/115693833",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 详细安装教程（详解 Git 安装过程的每一个步骤）"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("版权声明：本文为CSDN博主「mukes」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\n原文链接：https://blog.csdn.net/mukes/article/details/115693833")])])}),[],!1,null,null,null);a.default=e.exports}}]);